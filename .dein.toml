[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'Shougo/vimproc.vim'
[[plugins]]
repo = 'Shougo/denite.nvim'
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# Colors
# [[plugins]]
# repo = 'dracula/vim'
[[plugins]]
repo = 'reedes/vim-colors-pencil'
[[plugins]]
repo = 'yami-beta/lightline-pencil.vim'
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
          \ 'colorscheme': 'wombat',
          \ 'mode_map': {'c': 'NORMAL'},
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
          \ },
          \ 'component_function': {
          \   'modified': 'LightlineModified',
          \   'readonly': 'LightlineReadonly',
          \   'fugitive': 'LightlineFugitive',
          \   'filename': 'LightlineFilename',
          \   'fileformat': 'LightlineFileformat',
          \   'filetype': 'LightlineFiletype',
          \   'fileencoding': 'LightlineFileencoding',
          \   'mode': 'LightlineMode'
          \ }
          \ }

  function! LightlineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    else
      return ''
    endif
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    " qでバッファ閉じる
    au FileType qf nnoremap <silent><buffer>q :quit<CR>
    " 出力バッファへ移動
   " \rで書き込んで実行
    let g:quickrun_no_default_key_mappings = 1
    nnoremap \r :write<CR>:QuickRun -mode n<CR>
    xnoremap \r :<C-U>write<CR>gv:QuickRun -mode v<CR>
    let g:quickrun_no_default_key_mappings = 1
    nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
    xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
    " C-cで強制終了
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

    let g:quickrun_config = {
        \   "_" : {
            \   "hook/close_buffer/enable_empty_data" : 1,
            \   "outputter/buffer/split" : ":botright 8sp",
            \   "outputter/buffer/into" : 1,
            \   }
        \}
    " latexmk
    let g:quickrun_config['tex'] = {
            \   'command' : 'latexmk',
            \   'outputter' : 'error',
            \   'outputter/error/error' : 'quickfix',
            \   'cmdopt': '-pv -pdfdvi',
            \   'exec': ['%c %o %s']
            \ }
'''

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add= '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  let NERDTreeMinimalUI=1
'''
# caw
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
    nmap \c <Plug>(caw:zeropos:toggle)
    vmap \c <Plug>(caw:zeropos:toggle)
'''

# whitespace
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# ts
[[plugins]]
repo = 'leafgarland/typescript-vim'

# glsl
[[plugins]]
repo = 'tikhomirov/vim-glsl'
hook_add = '''
  autocmd! BufNewFile,BufRead *.vs,*.fs set ft=glsl
'''
# autopep8
[[plugins]]
repo = 'tell-k/vim-autopep8'
hook_add = '''
  function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
  endfunction

  function! Autopep8()
    call Preserve(':silent %!autopep8 -')
  endfunction

  " Shift + F で自動修正
  autocmd FileType python nnoremap <S-f> :call Autopep8()<CR>
'''

# previm
[[plugins]]
repo = 'previm/previm'
hook_add = '''
	let g:previm_open_cmd = 'open -a Firefox'
  augroup PrevimSettings
      autocmd!
      autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  augroup END
'''
# toml
[[plugins]]
repo = 'cespare/vim-toml'


