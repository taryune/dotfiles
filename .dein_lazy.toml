# Fern
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  nnoremap <silent><C-e> :Fern . -reveal=% -drawer -toggle<CR>
  let g:fern#default_hidden=1

  function! s:init_fern() abort
    " Define NERDTree like mappings
    nmap <buffer> o <Plug>(fern-action-open:edit)
    nmap <buffer> go <Plug>(fern-action-open:edit)<C-w>p
    nmap <buffer> t <Plug>(fern-action-open:tabedit)
    nmap <buffer> T <Plug>(fern-action-open:tabedit)gT
    nmap <buffer> i <Plug>(fern-action-open:split)
    nmap <buffer> gi <Plug>(fern-action-open:split)<C-w>p
    nmap <buffer> s <Plug>(fern-action-open:vsplit)
    nmap <buffer> gs <Plug>(fern-action-open:vsplit)<C-w>p
    nmap <buffer> ma <Plug>(fern-action-new-path)
    nmap <buffer> P gg
    nmap <buffer> C <Plug>(fern-action-enter)
    nmap <buffer> u <Plug>(fern-action-leave)
    nmap <buffer> r <Plug>(fern-action-reload)
    nmap <buffer> R gg<Plug>(fern-action-reload)<C-o>
    nmap <buffer> cd <Plug>(fern-action-cd)
    nmap <buffer> CD gg<Plug>(fern-action-cd)<C-o>
    nmap <buffer> I <Plug>(fern-action-hidden-toggle)
    nmap <buffer> q :<C-u>quit<CR>

    " expand
    nmap <buffer> <CR> <plug>(fern-action-open-or-expand)
  endfunction
  augroup fern-custom
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = ['lambdalisue/fern.vim']


# dart
[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = ['dart']

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

# golang
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_debug_windows = {
        \ 'vars':       'rightbelow 60vnew',
        \ 'stack':      'rightbelow 10new',
  \ }
  " Info
  let g:go_auto_type_info = 1
  set updatetime=100
  " Import
  let g:go_fmt_command = "goimports"
  " Keybindings
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>T <Plug>(go-test-func)
  autocmd FileType go nmap <leader>b <Plug>(go-build)
  autocmd FileType go nmap <leader>dt  :GoDebugTestFunc<CR>
  autocmd FileType go nmap <leader>dc  :GoDebugContinue<CR>
  autocmd FileType go nmap <leader>db  :GoDebugBreakpoint<CR>
  autocmd FileType go nmap <leader>ds  :GoDebugStop<CR>
  autocmd FileType go nmap <leader>dp  :GoDebugPrint 
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " Close buffer
  au FileType qf nnoremap <silent><buffer>q :quit<CR>

  "

  " Write
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \r :write<CR>:QuickRun -mode n<CR>
  xnoremap \r :<C-U>write<CR>gv:QuickRun -mode v<CR>
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
  xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

  " Force quit
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  let g:quickrun_config = {
  \   "_" : {
  \   "hook/close_buffer/enable_empty_data" : 1,
  \   "outputter/buffer/split" : ":botright 8sp",
  \   }
  \}

  " latexmk
  let g:quickrun_config['tex'] = {
  \   'command' : 'latexmk',
  \   'outputter' : 'error',
  \   'outputter/error/error' : 'quickfix',
  \   'cmdopt': '-pv -pdfdvi',
  \   'exec': ['%c %o %s']
  \ }
'''


